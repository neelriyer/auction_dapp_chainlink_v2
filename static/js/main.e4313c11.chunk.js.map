{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","accounts","contract","auctionOwner","auctionId","bidInput","highestBid","highestBidder","userBalance","componentDidMount","eth","getAccounts","net","getId","instance","Contract","AuctionContract","abi","config","network","auction_address","methods","getAuctionOwner","call","owner","getAuctionId","id","getHighestBidder","getHighestBid","priceFeed","PriceConsumerV3","price_feed_address","getThePrice","ethPrice","setState","utils","fromWei","toString","alert","error","bid","bidValue","toWei","send","from","value","BigNumber","withdraw","inputHandler","event","target","this","className","href","type","onChange","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e4313c11.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","\nimport React, { Component } from \"react\";\n// import AuctionContract from \"./contracts/Auction.json\";\nimport AuctionContract from \"./backend/build/contracts/SimpleAuction.json\" ;\nimport PriceConsumerV3 from \"./backend/build/contracts/PriceConsumerV3.json\" ;\n\nimport getWeb3 from \"./getWeb3\";\nimport config from \"./config/config.json\"\nimport BigNumber from \"bignumber.js\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n     web3: null,\n     accounts: null,\n     contract: null,\n     auctionOwner: null,\n     auctionId: 0,\n     bidInput: \"\",\n     highestBid: 0,\n     highestBidder: null,\n     userBalance: 0\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const instance = new web3.eth.Contract(\n        AuctionContract.abi, \n        config.network && config.auction_address, //address\n      );\n      const owner = await instance.methods.getAuctionOwner().call();\n      const id = await instance.methods.getAuctionId().call();\n      const highestBidder = await instance.methods.getHighestBidder().call();\n      const highestBid = await instance.methods.getHighestBid().call();\n      \n      // eth price\n      const priceFeed = new web3.eth.Contract(PriceConsumerV3.abi, config.network && config.price_feed_address);\n      const ethPrice = await priceFeed.methods.getThePrice().call()/1e8;\n      \n      // const userBalance = await instance.methods.getUserBalance().call({from: accounts[0]});\n\n      console.log(\"accounts: \" + accounts);\n      console.log(\"auction owner: \" + owner);\n      console.log(\"auction id: \" + id);\n      console.log(\"highest bidder: \" + highestBidder);\n      console.log(\"highest bid: \" + highestBid);\n      console.log(\"ethPrice: \" + ethPrice);\n      // console.log(\"user balance: \" + userBalance);\n\n      this.setState({\n        web3: web3,\n        accounts: accounts,\n        contract: instance,\n        auctionOwner: owner,\n        auctionId: id,\n        highestBid: web3.utils.fromWei(highestBid, 'ether'),\n        highestBidder: highestBidder,\n        ethPrice: ethPrice.toString(),\n        // userBalance: web3.utils.fromWei(userBalance, 'ether')\n      });\n\n      console.log(this.state);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      console.log(error);\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      \n      console.error(error);\n    }\n  };\n\n  bid = async () => {\n    const { web3, accounts, contract } = this.state;\n    const bidValue = web3.utils.toWei(this.state.bidInput, 'ether');\n    console.log(\"New bid value: \" + web3.utils.fromWei(bidValue, 'ether'));\n\n    await contract.methods.bid().send({from: accounts[0], value: bidValue});\n    const highestBidder = await contract.methods.getHighestBidder().call();\n    const highestBid = BigNumber(await contract.methods.getHighestBid().call());\n    // const userBalance = await contract.methods.getUserBalance().call({from: accounts[0]});\n    \n    // contract.once('HighestBidIncreased', {\n    //   filter: {user: accounts[0]},\n    //   fromBlock: \"latest\"\n    // }, function(error, event){\n    //     if (error) {console.log(error)}\n    //     else {\n    //       console.log(event)\n    //       console.log(event.returnValues)\n    //       var eventDecoded = web3.utils.hexToUtf8(event.returnValues);\n    //       console.log(eventDecoded)\n    //     }\n    // });\n    \n    console.log(\"highest bidder: \" + highestBidder.toString());\n    console.log(\"highest bid: \" + web3.utils.fromWei(highestBid.toString(), 'ether'));\n    // console.log(\"user balance: \" + userBalance);\n\n    this.setState({\n      highestBid: web3.utils.fromWei(highestBid.toString(), 'ether'),\n      highestBidder: highestBidder.toString(),\n      // userBalance: web3.utils.fromWei(userBalance, 'ether')\n    });\n  };\n\n  withdraw = async () => {\n    const {web3, accounts, contract} = this.state;\n    console.log(\"Withdraw bid from account: \" + accounts[0]);\n\n    await contract.methods.withdraw().send({from: accounts[0]});\n    const highestBidder = await contract.methods.getHighestBidder().call();\n    const highestBid = await contract.methods.getHighestBid().call();\n    // const userBalance = await contract.methods.getUserBalance().call({from: accounts[0]});\n    console.log(\"highest bidder :\" + highestBidder);\n    console.log(\"highest bid :\" + highestBid);\n    // console.log(\"user balance: \" + userBalance);\n\n    this.setState({\n      highestBid: web3.utils.fromWei(highestBid, 'ether'),\n      highestBidder: highestBidder,\n      // userBalance: web3.utils.fromWei(userBalance, 'ether')\n    });\n  }\n\n  inputHandler = (event) => {\n    this.setState({bidInput: event.target.value});\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n\n      <div className=\"Auction App\">\n        <h1>Auction DApp with Chainlink</h1>\n        {/* <div style=\"background-image: url('background.png');\"></div> */}\n        {/* <img src=\"\" alt=\"Parks and Rec DApp img\"></img> */}\n        <div>Auction owner address: <strong>{this.state.auctionOwner}</strong>\n            <br/> Highest bidder: <strong>{(this.state.highestBidder == this.state.accounts[0]) ? \"You are the highest bidder\" : this.state.highestBidder}</strong>\n            <br/> Highest bid: <strong>{this.state.highestBid} ether </strong>\n            <br/> Highest bid (USD): <strong> {this.state.ethPrice*this.state.highestBid} USD </strong> <a href = \"https://kovan.etherscan.io/address/0x9326BFA02ADD2366b30bacB125260Af641031331\">from chainlink aggregator</a> \n        </div>\n        <div>Auction ID: <strong>{this.state.auctionId}</strong>\n          {/* <br/>Your total bid: <strong>{this.state.userBalance} ether</strong> */}\n        </div>\n        <p>Enter your bid value in ether</p>\n        <input\n            type=\"text\"\n            onChange={this.inputHandler}\n        />\n        <button onClick={this.bid}>BID</button>\n        <h2>Withdraw bid</h2>\n        <button onClick={this.withdraw}>WITHDRAW</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}