{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","accounts","contract","auctionOwner","auctionId","bidInput","highestBid","highestBidder","userBalance","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","AuctionContract","networks","instance","Contract","abi","address","methods","getAuctionOwner","call","owner","getAuctionId","id","getHighestBidder","getHighestBid","getUserBalance","from","setState","utils","fromWei","alert","error","bid","bidValue","toWei","send","value","withdraw","inputHandler","event","target","this","className","type","onChange","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8785a0d0.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport AuctionContract from \"./contracts/Auction.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n     web3: null,\n     accounts: null,\n     contract: null,\n     auctionOwner: null,\n     auctionId: 0,\n     bidInput: \"\",\n     highestBid: 0,\n     highestBidder: null,\n     userBalance: 0\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = AuctionContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        AuctionContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      const owner = await instance.methods.getAuctionOwner().call();\n      const id = await instance.methods.getAuctionId().call();\n      const highestBidder = await instance.methods.getHighestBidder().call();\n      const highestBid = await instance.methods.getHighestBid().call();\n      const userBalance = await instance.methods.getUserBalance().call({from: accounts[0]});\n\n      console.log(\"accounts: \" + accounts);\n      console.log(\"auction owner: \" + owner);\n      console.log(\"auction id: \" + id);\n      console.log(\"highest bidder: \" + highestBidder);\n      console.log(\"highest bid: \" + highestBid);\n      console.log(\"user balance: \" + userBalance);\n\n      this.setState({\n        web3: web3,\n        accounts: accounts,\n        contract: instance,\n        auctionOwner: owner,\n        auctionId: id,\n        highestBid: web3.utils.fromWei(highestBid, 'ether'),\n        highestBidder: highestBidder,\n        userBalance: web3.utils.fromWei(userBalance, 'ether')});\n\n      console.log(this.state);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  bid = async () => {\n    const { web3, accounts, contract } = this.state;\n    const bidValue = web3.utils.toWei(this.state.bidInput, 'ether');\n    console.log(\"New bid value: \" + web3.utils.fromWei(bidValue, 'ether'));\n\n    await contract.methods.bid().send({from: accounts[0], value: bidValue});\n    const highestBidder = await contract.methods.getHighestBidder().call();\n    const highestBid = await contract.methods.getHighestBid().call();\n    const userBalance = await contract.methods.getUserBalance().call({from: accounts[0]});\n    console.log(\"highest bidder: \" + highestBidder);\n    console.log(\"highest bid: \" + web3.utils.fromWei(highestBid, 'ether'));\n    console.log(\"user balance: \" + userBalance);\n\n    this.setState({\n      highestBid: web3.utils.fromWei(highestBid, 'ether'),\n      highestBidder: highestBidder,\n      userBalance: web3.utils.fromWei(userBalance, 'ether')});\n  };\n\n  withdraw = async () => {\n    const {web3, accounts, contract} = this.state;\n    console.log(\"Withdraw bid from account: \" + accounts[0]);\n\n    await contract.methods.withdraw().send({from: accounts[0]});\n    const highestBidder = await contract.methods.getHighestBidder().call();\n    const highestBid = await contract.methods.getHighestBid().call();\n    const userBalance = await contract.methods.getUserBalance().call({from: accounts[0]});\n    console.log(\"highest bidder :\" + highestBidder);\n    console.log(\"highest bid :\" + highestBid);\n    console.log(\"user balance: \" + userBalance);\n\n    this.setState({\n      highestBid: web3.utils.fromWei(highestBid, 'ether'),\n      highestBidder: highestBidder,\n      userBalance: web3.utils.fromWei(userBalance, 'ether')});\n  }\n\n  inputHandler = (event) => {\n    this.setState({bidInput: event.target.value});\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"Auction App\">\n        <h1>Good to Go!</h1>\n        <div>Auction owner address: <strong>{this.state.auctionOwner}</strong>\n            <br/> Highest bidder: <strong>{(this.state.highestBidder == this.state.accounts[0]) ? \"You are the highest bidder\" : this.state.highestBidder}</strong>\n            <br/> Highest bid: <strong>{this.state.highestBid} ether</strong>\n        </div>\n        <div>Auction ID: <strong>{this.state.auctionId}</strong>\n          <br/>Your total bid: <strong>{this.state.userBalance} ether</strong>\n        </div>\n        <p>Enter your bid value in ether</p>\n        <input\n            type=\"text\"\n            onChange={this.inputHandler}\n        />\n        <button onClick={this.bid}>BID</button>\n        <h2>Withdraw bid</h2>\n        <button onClick={this.withdraw}>WITHDRAW</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}